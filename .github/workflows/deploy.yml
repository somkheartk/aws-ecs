name: Deploy to ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Debug AWS secrets loading
        run: |
          echo "AWS_ACCESS_KEY_ID loaded with length: ${#AWS_ACCESS_KEY_ID}"
          echo "AWS_SECRET_ACCESS_KEY loaded with length: ${#AWS_SECRET_ACCESS_KEY}"

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login \
            --username AWS \
            --password-stdin 863518417758.dkr.ecr.us-east-1.amazonaws.com

      - name: Build, tag, and push Docker image
        run: |
          IMAGE=mobile-lpr/backend
          ECR=863518417758.dkr.ecr.us-east-1.amazonaws.com
          TAG=latest

          docker build -t $IMAGE:$TAG .
          docker tag $IMAGE:$TAG $ECR/$IMAGE:$TAG
          docker push $ECR/$IMAGE:$TAG

      - name: Register new ECS task definition
        id: register-task
        run: |
          TASK_DEF=$(aws ecs describe-task-definition --task-definition my-task-def)
          NEW_TASK_DEF=$(echo "$TASK_DEF" | jq '.taskDefinition' | \
            jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' | \
            jq '.containerDefinitions[0].image="863518417758.dkr.ecr.us-east-1.amazonaws.com/mobile-lpr/backend:latest"')
          echo "$NEW_TASK_DEF" > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json > result.json
          TASK_DEF_ARN=$(cat result.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster my-cluster \
            --service my-service \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment \
            --region us-east-1
